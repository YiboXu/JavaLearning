命令模式: 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。

好处： 第一， 它能较容易地设计一个命令队列，第二，在需要的情况下，可以较容易地将命令记入日志。
第三，允许接收请求的一方决定是否要否决请求。 第四， 可以容易地实现对请求的撤销和重做。 第五， 由于加入新的具体命令类不影响其他的类，
因此增加新的具体命令类很容易。

package chap23;

public abstract class Receiver {
    private String name;
    public Receiver(String name){
        this.name = name;
    }

    public String toString(){
        return name;
    }

    public abstract void action();
}



package chap23;

public class PorkChef extends Receiver {
    public PorkChef(String name) {
        super(name);
    }

    @Override
    public void action() {
        System.out.println(this+" is cooking pork");
    }
}



package chap23;

public class FishChef extends Receiver {
    public FishChef(String name) {
        super(name);
    }

    @Override
    public void action() {
        System.out.println(this+" is cooking fish.");
    }
}



package chap23;

public abstract class Command {
    private Receiver receiver;

    public Command(Receiver receiver){
        this.receiver = receiver;
    }

    public Receiver getReceiver(){
        return receiver;
    }

    public abstract void execute();
}



package chap23;

import chap19.Company;

public class PorkCommand extends Command {
    public PorkCommand(Receiver receiver) {
        super(receiver);
    }

    @Override
    public void execute() {
        this.getReceiver().action();
    }
}



package chap23;

public class FishCommand extends Command {
    public FishCommand(Receiver receiver) {
        super(receiver);
    }

    @Override
    public void execute() {
        this.getReceiver().action();
    }
}



package chap23;

import java.util.ArrayList;
import java.util.List;

public abstract class Invoker {
    private String name;

    public Invoker(String name){
        this.name = name;
    }

    public abstract void addCommand(Command command);
    public abstract void cancelCommand(Command command);
    public abstract void executeCommands();
}



package chap23;

import java.util.ArrayList;
import java.util.List;

public class Waiter extends Invoker {

    private List<Command> commandList = new ArrayList<Command>();

    public Waiter(String name) {
        super(name);
    }

    @Override
    public void addCommand(Command command) {
        commandList.add(command);
    }

    @Override
    public void cancelCommand(Command command) {
        commandList.remove(command);
    }

    @Override
    public void executeCommands() {
        System.out.println("Executing Order:");
        for(Command command:commandList){
            command.execute();
        }
    }
}



package chap23;

public class Client {
    public static void main(String[] args){
        //open the shop
        PorkChef porkChef = new PorkChef("BillHu");
        FishChef fishChef = new FishChef("Sofia");
        Waiter waiter = new Waiter("Jim");

        //service client
        waiter.addCommand(new PorkCommand(porkChef));
        waiter.addCommand(new FishCommand(fishChef));
        waiter.addCommand(new PorkCommand(porkChef));
        waiter.addCommand(new FishCommand(fishChef));
        waiter.executeCommands();
    }
}
