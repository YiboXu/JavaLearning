当一个对象的改变需要同时改变其他对象的时候，而且它不知道具体有多少对象有待改变的时候，应该考虑使用观察者模式。

package chap14;

import java.util.ArrayList;
import java.util.List;

public class Subject {
    List<Observer> notifyList = new ArrayList<Observer>();

    public void attach(Observer observer){
        notifyList.add(observer);
    }

    public void detach(Observer observer){
        notifyList.remove(observer);
    }

    public void notifyObserver(){
        for(Observer observer:notifyList){
            observer.update();
        }
    }
}


package chap14;

public class ConcreteSubject extends Subject {
    private String subjectStatus;

    public String getSubjectStatus(){
        return subjectStatus;
    }

    public void setSubjectStatus(String status){
        this.subjectStatus = status;
    }
}


package chap14;

public interface Observer {
    public void update();
}



package chap14;

public class ConcreteObserver implements Observer {
    private ConcreteSubject subject;
    private String name;
    private String observerStatus;

    public ConcreteObserver(ConcreteSubject subject, String name){
        this.subject = subject;
        this.name = name;
    }

    @Override
    public void update() {
        this.observerStatus = subject.getSubjectStatus();
        System.out.println("Observer "+name+"'s status is changed to "+subject.getSubjectStatus());
    }
}


package chap14;

public class Client {
    public static void main(String[] args){
        ConcreteSubject boss = new ConcreteSubject();
        ConcreteObserver bill = new ConcreteObserver(boss,"BillHu");
        ConcreteObserver sofia = new ConcreteObserver(boss, "sofia");
        
        boss.attach(bill);
        boss.attach(sofia);

        boss.setSubjectStatus("Boss-Coming");
        boss.notifyObserver();
    }
}
