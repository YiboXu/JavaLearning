1. 设计模式的原则(目的)
- 单一职责原则
- 接口隔离原则
- 依赖倒转原则
- 里氏替换原则
- 开闭原则
- 迪米特法则
- 合成复用原则
为了提高程序的:
- 代码重用性
- 可图形
- 可扩展性
- 可靠性
- 是程序呈现高内聚，低耦合的特性

/**
 * 类之间的关系:
 * Class A{
 *     public void foo();
 * }
 *
 *
 * 继承
 * Class B extend A{
 *
 * }
 *
 * 依赖 (在B中用到了A, 那么，B就依赖于A)
 * Class B{
 *     public void foo(A a){
 *         a.foo();
 *     }
 * }
 * Class B{
 *  Private A a;
 * }
 * Class B{
 *  public A foo(){return new A()};
 * }
 * Class B{
 *  public void foo(){A a = new A();}
 * }
 *
 * 聚合
 * Class B{
 *     private A a;
 *     public void setA(A a){this.a = a;}
 *     public void foo(){
 *         this.a.foo();
 *     }
 * }
 *
 * 组合
 * Class B{
 *     private A a;
 *     public B(){
 *         this.a = new A();
 *     }
 *     public void foo(){
 *         this.a.foo();
 *     }
 * }
 *
 * 设计原则核心思想
 * - 找出应用中可能需要变化值除，把他们独立出来，不要和哪些不需要变化的代码混在一起
 * - 针对接口编程，而不是针对实现编程
 * - 为了交互对象之间的松耦合设计而努力
 * - 尽量使用聚合/合成而不是继承关系
 * - 遵从迪米特法则， 只与成员变量，方法参数，返回值对应的类发生耦合，如果需要与其他对象发生耦合，就将这些对象封装到成员变量，方法参数使用
 * - 开闭原则： 一个软件实体如类，模块和函数应该对扩展开放(相对功能提供方)，对修改关闭(对功能使用方)
 * - 设计接口时候设计最小接口





