在想使用一个已近存在的类， 但如果它的接口，也就是它的方法和你的要求不同时，就应该考虑用适配器模式。
两个类所做的事情相同或相似，但是具有不同的接口时要使用它。

但是有一个使用前提就是，在调用类和被调用类都不太容易修改的时候才使用，而不是一有不同就使用，应该优先考虑优化设计统一接口。

package chap17;

public abstract class Player {
    private String name;

    public Player(String name){
        this.name = name;
    }

    public abstract void attack();
    public abstract void defence();

    public String getName(){
        return name;
    }
}


package chap17;

public class Forwards extends Player {
    public Forwards(String name) {
        super(name);
    }

    @Override
    public void attack() {
        System.out.println(getName()+" is attacking!");
    }

    @Override
    public void defence() {
        System.out.println(getName()+" is defencing!");
    }
}


package chap17;

public class Centers extends Player {
    public Centers(String name) {
        super(name);
    }

    @Override
    public void attack() {
        System.out.println(getName()+" is attacking!");
    }

    @Override
    public void defence() {
        System.out.println(getName()+" is defencing!");
    }
}



package chap17;

public class Guards extends Player {
    public Guards(String name) {
        super(name);
    }

    @Override
    public void attack() {
        System.out.println(getName() +" is attacking!");
    }

    @Override
    public void defence() {
        System.out.println(getName() + " is defencing!");
    }
}



package chap17;

public class ForeignCenter {
    private String name;

    public ForeignCenter(String name){
        this.name = name;
    }

    public void foreignAttack(){
        System.out.println(name + " is attacking");
    }

    public void foreignDefence(){
        System.out.println(name + " is defencing!");
    }
}



package chap17;

public class Translator extends Player {
    private ForeignCenter center;

    public Translator(String name) {
        super(name);
        center = new ForeignCenter(name);
    }

    @Override
    public void attack() {
        center.foreignAttack();
    }

    @Override
    public void defence() {
        center.foreignDefence();
    }
}



package chap17;

public class Client {
    public static void main(String[] args){
        Forwards forward = new Forwards("BillHu");
        Centers center = new Centers("Alex");
        Guards guard = new Guards("Jim");

        Translator translator = new Translator("YaoMing");

        forward.attack();
        center.attack();
        guard.attack();
        translator.attack();

        translator.defence();
    }
}
