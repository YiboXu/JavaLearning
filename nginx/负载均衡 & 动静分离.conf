
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
#这个值是表示每个worker进程所能建立连接的最大值，所以，一个nginx能建立的最大连接数，应该是worker_connections * worker_processes
#当然，这里说的是最大连接数，对于HTTP请求本地资源来说,能够支持的最大并发数量是worker_connections * worker_processes.
#如果是支持http1.1的浏览器每次访问要占2个连接
#所以普通的静态访问最大并发数是: worker_connections * worker_processes / 2.
#而如果是HTTP作为方向代理来说，最大并发数量应该是worker_connections * worker_processes / 4.
#因为作为反向代理服务器,每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接.
    worker_connections  1024;

#这个值是表示nginx要迟迟那种多路io复用
#一般的linux选择epoll, 如果是(*BSD)系列的Linux使用kquene.
#windows版本的nginx不支持多路IO复用，这个值不用配.
#	use epoll;

#当一个worker抢占到一个链接时, 是否尽可能的让其获得更多的链接，默认时off
#只有当并发量需求很大的时候才有必要开启
     multi_accept on;
#开启nginx的抢占锁机制，默认时on (并发量很小的时候，避免worker相互争抢链接，就关闭; 并发量很大的时候，让worker去争抢链接，就开启)
     accept_mutex on;
}


http {
#当web服务器收到静态的资源文件请求时, 依据请求文件的后缀名在服务器的MIME配置文件中找到对应的MIME Type,再根据MIME Type
#设置HTTP Response的Content-Type，然后浏览器根据Content-Type的值处理文件. （静态资源）
    include       mime.types;
#如果不能从mime.types找到映射的话，用以下作为默认值 （动态资源）
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

#访问日志
    #access_log  logs/access.log  main;
#开启从磁盘直接到网络的文件传输，适用于有大文件上传下载的情况，提高IO效率
    sendfile        on;
    #tcp_nopush     on;

#一个请求完成之后还要保持连接多久，默认为0，表示完成请求后直接关闭连接
    #keepalive_timeout  0;
    keepalive_timeout  65;
#开启或关闭gzip模块
    #gzip  on;
#设置允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取.
    #gzip_min_length 1k;
# gzip压缩比， 1 压缩比最小处理速度最快， 9 压缩比最大但处理最慢
    #gzip_comp_level4；
#匹配MIME类型进行压缩，(无论是否指定) "text/html"类型总是会被压缩的
    #gzip_types types text/plain text/css application/json application/x-javascript text/xml

    #反向代理1
    server {
        listen       80;
        server_name  192.168.0.105;

        #通过http://localhost 访问 http://localhost:8080/
        location / {
            root   html;
			proxy_pass http://127.0.0.1:8080;
            index  index.html index.htm;
        }

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
	
	#反向代理2
	#location [=|~|~*|^~] /uri/ {... }
	# = 精确匹配
	# ~ 正则匹配， 区分大小写
	# ~* 正则匹配，不区分大小写
	# ^~ 关闭正则匹配
	
	# 匹配原则:
	# 1. 所有匹配分两个阶段， 第一个叫普通匹配(不是以~开头的)， 第二个叫正则匹配(以~开头的)
	# 2. 普通匹配， 首相通过 "="来匹配完全精确的location
	#   2.1 如果没有精确匹配到，那么按照最大前缀匹配的原则来匹配location
	#   2.2 如果匹配到的location有^~,则以此location为匹配最终结果，如果没有那么会把2.1匹配的结果暂存, 继续进行正则匹配.
	# 3. 正则匹配， 依次从上到下匹配前缀是~或~*的location, 一旦匹配成功依次，则立刻以此location为准，不再向下继续进行正则匹配.
	# 4. 如果正则匹配都不成功，则继续使用之前暂存的普通匹配成功location
	server {
        listen       9001;
        server_name  192.168.0.105;

		#通过http://localhost：9001/edu/ 访问 http://localhost:8080/edu
		# ~ 表示域名通过正则表达式形式，里面包含了/edu/
        location ~ /edu/ {
			proxy_pass http://127.0.0.1:8080;
        }
		#通过http://localhost：9001/vod/ 访问 http://localhost:8081/vod
		# ~ 表示域名通过正则表达式形式，里面包含了/vod/
		location ~ /vod/ {
			proxy_pass http://127.0.0.1:8081;
        }
    }
	
	#负载均衡
	#定义用于负载均衡的服务器列表,均衡方式
	#1.轮询(默认)，按照访问时间顺序依次访问各个服务器
	#upstream myserver{
	#    server 127.0.0.1:8080;
	#	 server 127.0.0.1:8081;
	#}
	#2.通过weignt来设置服务器被访问的几率，weight默认为1，值越大，被选中的几率越大
	#upstream myserver{
	#    server 127.0.0.1:8080 weight=5;
	#	 server 127.0.0.1:8081 weight=10;
	#}
	#3.iphash, 通过访问的ip的hash值来确定访问哪台服务器，这样同一个ip永远访问的是同一台服务器，对于有状态的访问(web访问)，可以解决session问题，但是对于无状态的访问（RestFul API)，就不是必须用iphash.
	#upstream myserver{
	#    iphash; 
	#    server 127.0.0.1:8080;
	#	 server 127.0.0.1:8081;
	#}
	#4. fair, 按照服务器的响应时间来分配，响应时间短的服务器优先分配
	#upstream myserver{
	#    server 127.0.0.1:8080;
	#	 server 127.0.0.1:8081;
	#    fair;
	#}
	#5. backup，备机方式
	#正常情况下不访问设定为backup的备机，只有当所有非备机全部宕机的情况下，服务才会进备机
	#upstream myserver{
	#   server 127.0.0.1:8080;
	#	server 127.0.0.1:8081 backup;
	#}
	upstream myserver{
	    server 127.0.0.1:8080;
		server 127.0.0.1:8081;
	}
	
	#定义监听规则
	server {
	    listen 9002;
		server_name 192.168.0.105;
		
		location / {
		  proxy_pass http://myserver;
		}
	}
	
	#动静分离
	#服务器端静态资源缓存，最大缓存到内存中的文件，不活跃期限
	open_file_cache max=655350 inactive=20s
	#活跃期限内最少使用的次数，否则视为不活跃
	#open_file_cache_min_uses 2;
	#验证缓存是否活跃的时间间隔
	#open_file_cache_valid 30s;
	server {
        listen       9003;
        server_name  192.168.0.105;

        #配置静态资源
        #通过http://192.168.0.105/www/hello.html 访问 C:/Users/TaoHu/Desktop/nginx/static/www/hello.html
		#通过http://192.168.0.105/image/hello.jpg 访问 C:/Users/TaoHu/Desktop/nginx/static/image/hello.jpg
		#在服务器的路径C:/Users/TaoHu/Desktop/nginx/static/下有2个目录，一个是www,里面存放了静态html，另一个目录是image，里面存放了jpg文件
        location /www/ {
            root   C:/Users/TaoHu/Desktop/nginx/static/;
            index  index.html index.htm;
        }
        location /image/ {
            root   C:/Users/TaoHu/Desktop/nginx/static/;
            autoindex on;
        }

        #配置动态资源
		location / {
		  proxy_pass http://myserver;
		}
    }
}
