server:
  port: 9527

spring:
  application:
    name: gulimall-gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true # 开启从注册中心动态创建路由的功能，利用微服务名称进行路由
      routes:
        - id: coupon_route # 路由的id,没有规定规则但要求唯一,建议配合服务名, 通过http://localhost:9527/xxx 来访问各个服务
          #匹配后提供服务的路由地址
          uri: lb://gulimall-coupon
          #predicate就是一组匹配规则，让请求找到对应的route来进行处理
          predicates:
            - Path=/api/coupon/** # 断言，路径相匹配的进行路由
          filters:  #路径重写，将路径中的api去掉
            - RewritePath=/api/(?<segment>/?.*), /$\{segment}
        - id: member_route # 路由的id,没有规定规则但要求唯一,建议配合服务名
          #匹配后提供服务的路由地址
          uri: lb://gulimall-member
          #predicate就是一组匹配规则，让请求找到对应的route来进行处理
          predicates:
            - Path=/api/member/** # 断言，路径相匹配的进行路由
          filters:  #路径重写，将路径中的api去掉
            - RewritePath=/api/(?<segment>/?.*), /$\{segment}
        - id: order_route # 路由的id,没有规定规则但要求唯一,建议配合服务名
          #匹配后提供服务的路由地址
          uri: lb://gulimall-order
          #predicate就是一组匹配规则，让请求找到对应的route来进行处理
          predicates:
            - Path=/api/order/** # 断言，路径相匹配的进行路由
          filters:  #路径重写，将路径中的api去掉
            - RewritePath=/api/(?<segment>/?.*), /$\{segment}
        - id: product_route # 路由的id,没有规定规则但要求唯一,建议配合服务名
          #匹配后提供服务的路由地址
          uri: lb://gulimall-product
          #predicate就是一组匹配规则，让请求找到对应的route来进行处理
          predicates:
            - Path=/api/product/** # 断言，路径相匹配的进行路由
          filters:  #路径重写，将路径中的api去掉
            - RewritePath=/api/(?<segment>/?.*), /$\{segment}
        - id: ware_route # 路由的id,没有规定规则但要求唯一,建议配合服务名
          #匹配后提供服务的路由地址
          uri: lb://gulimall-ware
          #predicate就是一组匹配规则，让请求找到对应的route来进行处理
          predicates:
            - Path=/api/ware/** # 断言，路径相匹配的进行路由
          filters:  #路径重写，将路径中的api去掉
            - RewritePath=/api/(?<segment>/?.*), /$\{segment}
        - id: thirdparty_route # 路由的id,没有规定规则但要求唯一,建议配合服务名
          #匹配后提供服务的路由地址
          uri: lb://gulimall-thirdparty
          #predicate就是一组匹配规则，让请求找到对应的route来进行处理
          predicates:
            - Path=/api/thirdparty/** # 断言，路径相匹配的进行路由
          filters:  #路径重写，将路径中的api去掉
            - RewritePath=/api/thirdparty/(?<segment>/?.*), /$\{segment}
        - id: admin_route # 路由的id,没有规定规则但要求唯一,建议配合服务名
          #匹配后提供服务的路由地址
          uri: lb://gulimall-admin
          #predicate就是一组匹配规则，让请求找到对应的route来进行处理
          predicates:
            - Path=/api/** # 断言，路径相匹配的进行路由
          filters:  #路径重写，将路径中的api替换未renren-fast (匹配其application.yml里面的servlet.context-path: /renren-fast)
            - RewritePath=/api/(?<segment>/?.*), /renren-fast/$\{segment}

management:
  endpoints:
    web:
      exposure:
        include: '*'

info:
  app.name: gulimall
  company.name: www.springlearning.com
  build.artifactId: ${project.artifactId}
  build.version: ${project.version}