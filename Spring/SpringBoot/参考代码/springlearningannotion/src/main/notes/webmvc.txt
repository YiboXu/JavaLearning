Servlet 3.0新特性
Shared libraries（共享库） / runtimes pluggability（运行时插件能力）

1、Servlet容器启动会扫描，当前应用里面每一个jar包的
	ServletContainerInitializer的实现
2、提供ServletContainerInitializer的实现类；
	必须绑定在，META-INF/services/javax.servlet.ServletContainerInitializer
	文件的内容就是ServletContainerInitializer实现类的全类名；

总结：容器在启动应用的时候，会扫描当前应用每一个jar包里面
META-INF/services/javax.servlet.ServletContainerInitializer
指定的实现类，启动并运行这个实现类的方法；传入感兴趣的类型；


ServletContainerInitializer；
@HandlesTypes；

SpringMVC:
SpringMVC就是利用Servlet 3.0的这个新特性，在org.springframework.spring-web这个包下有META-INF/services/javax.servlet.ServletContainerInitializer
里面内容是org.springframework.web.SpringServletContainerInitializer. 这个类有注释@HandlesTypes(WebApplicationInitializer.class)和一个onStartup方法.
所以web容器启动的时候，就会调用SpringServletContainerInitializer的onStartup方法来加载注释@HandlesTypes里面指明的类的实现类.

1、web容器在启动的时候，会扫描每个jar包下的META-INF/services/javax.servlet.ServletContainerInitializer
2、加载这个文件指定的类SpringServletContainerInitializer
3、spring的应用一启动会加载感兴趣的WebApplicationInitializer接口的下的所有组件；
4、并且为WebApplicationInitializer组件创建对象（组件不是接口，不是抽象类）
	1）、AbstractContextLoaderInitializer：创建根容器；createRootApplicationContext()；
	2）、AbstractDispatcherServletInitializer：
			创建一个web的ioc容器；createServletApplicationContext();                ===>相当于创建web.xml并嵌入一个dispatcher-servlet.xml
			创建了DispatcherServlet；createDispatcherServlet()；
			将创建的DispatcherServlet添加到ServletContext中；
				getServletMappings();
		    并添加Filter和Listener
	3）、AbstractAnnotationConfigDispatcherServletInitializer：注解方式配置的DispatcherServlet初始化器
			创建根容器：createRootApplicationContext()           ====>相当于通过一个spring的@Configuration类来启动一个IOC容器(根ioc容器)
					getRootConfigClasses();传入一个配置类              在里面配置Service,Repositories
			创建web的ioc容器： createServletApplicationContext();    ====>相当于通过一个spring的@Configuration类来启动一个IOC容器(web的ioc容器)
					获取配置类；getServletConfigClasses();                  在里面配置Controller, ViewResolver, HandlerMapping

总结：
	以注解方式来启动SpringMVC；继承AbstractAnnotationConfigDispatcherServletInitializer；
实现抽象方法:
getRootConfigClasses: 指定配置类来配置Service,Repositories
getServletConfigClasses: 指定配置类来配置Controller, ViewResolver, HandlerMapping

===========================
定制SpringMVC；
1）、@EnableWebMvc:开启SpringMVC定制配置功能；
	<mvc:annotation-driven/>；

2）、配置组件（视图解析器、视图映射、静态资源映射、拦截器。。。）
	extends WebMvcConfigurerAdapter




