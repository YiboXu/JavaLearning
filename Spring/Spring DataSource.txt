一， 配置Spring数据源

0 样例中用到的User类
package example.domain;

import java.util.Arrays;
import java.util.Collection;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

public class User{
	private String username;
	private String password;
	
	public User() {}
	
	public User(String username, String password) {
		this.username = username;
		this.password = password;
	}
	
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	
	public String toString() {
		return username+":"+password;
	}
}


1. 创建 DataSourceConfiguration

package example.db;

import javax.sql.DataSource;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;

@Configuration
public class DataSourceConfiguration {

	@Bean
	public DataSource embeddedDataSource() {
		System.out.println("DB Initialization");
		return new EmbeddedDatabaseBuilder()
				.setType(EmbeddedDatabaseType.H2)
				.addScript("classpath:schema.sql")
				.addScript("classpath:test-data.sql")
				.build();
	}
	
	//下面这2个Bean是通过JdbcTemplate来访问数据源是才需要的，否则直接通过datasource调用SQL就能访问数据库了
	@Bean
	public JdbcTemplate jdbcTemplate(DataSource dataSource) {
		return new JdbcTemplate(dataSource);
	}
	
	@Bean
	public UserRepository userRepository(JdbcTemplate jdbcTemplate) {
		return new JdbcUserRepository(jdbcTemplate);
	}
}

配置其他数据源
@Bean
public DataSource dataSource() {
	DriverManagerDataSource ds = new DriverManagerDataSource();
	ds.setDriverClassName("org.h2.Driver");
	ds.setUrl("jdbc:h2:tcp://localhost/~/spitter");
	ds.setUsername("sa");
	ds.setPassword("");
	return ds;
}

2. 如果需要用JdbcTemplate来访问数据库，还需要定义:
package example.db;

import java.util.List;

import example.domain.User;

public interface UserRepository {

	  long count();
	  
	  User save(User user);

	  User findByUsername(String username);

	  List<User> findAll();
}



package example.db;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;

import example.domain.User;

@Repository
public class JdbcUserRepository implements UserRepository{

	private JdbcTemplate jdbcTemplate;
	
	@Autowired
	public JdbcUserRepository(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}
	
	@Override
	public long count() {
		// TODO Auto-generated method stub
		return jdbcTemplate.queryForObject("select count(id) from Spitter",java.lang.Long.class);
	}

	@Override
	public User save(User user) {
		// TODO Auto-generated method stub
		SimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(jdbcTemplate).withTableName("User");
		Map<String, Object> args = new HashMap<String, Object>();
		args.put("username", user.getUsername());
		args.put("password", user.getPassword());
		if(jdbcInsert.execute(args)>0)
			return user;
		else
			return null;
	}

	@Override
	public User findByUsername(String username) {
		// TODO Auto-generated method stub
		return jdbcTemplate.queryForObject("select username, password from User where username=?", new UserRowMapper(), username);
	}

	@Override
	public List<User> findAll() {
		// TODO Auto-generated method stub
		return jdbcTemplate.query("select username, password from User", new UserRowMapper());
	}

	private static final class UserRowMapper implements RowMapper<User> {

		@Override
		public User mapRow(ResultSet rs, int rowNum) throws SQLException {
			// TODO Auto-generated method stub
			String username = rs.getString("username");
			String password = rs.getString("password");
			return new User(username, password);
		}		
	}
}

3. 如何访问数据库
@Controller
public class HomeController {
	
	@Autowired
	private DataSource dataSource;
	
	@Autowired
	private UserRepository userRepository;
	
	@RequestMapping(value="/", method=GET)
	public String home() {
		test1();
		test2();
		return "home";
	}
	
	@RequestMapping(value="/index", method=GET)
	public String index() {
		return "index";
	}
	
	//使用datasource来访问数据库
	private void test1() {
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			conn = dataSource.getConnection();
			stmt = conn.prepareStatement("select * from User");
			ResultSet result = stmt.executeQuery();
			while(result.next()) {
				//System.out.println(result.getString(0));
				System.out.println(result.getString(1));
				System.out.println(result.getString(2));
				System.out.println(result.getString(3));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			try {
				if (stmt != null) {
				stmt.close();
				}
				if (conn != null) {
				conn.close();
				}
				} catch (SQLException e) {
				// I'm even less sure about what to do here
				}
		}
	}
	
	//使用JdbcTemplate来访问数据库
	private void test2() {
		userRepository.save(new User("hutao","123456"));
		List<User> users = userRepository.findAll();
		for(User user:users) {
			System.out.println(user);
		}
	}
}

二。使用Spring boot来定义数据源

1 使用JDBC

- 添加依赖
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-jdbc</artifactId>
</dependency>

//如果用别的数据库，就换成对应的依赖
<dependency>
<groupId>com.h2database</groupId>
<artifactId>h2</artifactId>
<scope>runtime</scope>
</dependency>

2. 配置数据源
在resource文件夹下添加application.properties配置文件并输入数据库参数，如下：

spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test

spring.datasource.username=root

spring.datasource.password=root

spring.datasource.driver-class-name=com.mysql.jdbc.Driver

spring.datasource.max-idle=10

spring.datasource.max-wait=10000

spring.datasource.min-idle=5

spring.datasource.initial-size=5

或者application.yml
spring:
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/test
    username: root
    password: root
    driver-class-name: com.mysql.jdbc.Driver
    max-idle: 10
    max-wait: 10000
    min-idle: 5
    initial-size: 5

2. 定义Repository
package example.db;

import java.util.List;

import example.domain.User;

public interface UserRepository {

	  long count();
	  
	  User save(User user);

	  User findByUsername(String username);

	  List<User> findAll();
}



package example.db;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;

import example.domain.User;

@Repository
public class JdbcUserRepository implements UserRepository{

	private JdbcTemplate jdbcTemplate;
	
	@Autowired
	public JdbcUserRepository(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}
	
	@Override
	public long count() {
		// TODO Auto-generated method stub
		return jdbcTemplate.queryForObject("select count(id) from Spitter",java.lang.Long.class);
	}

	@Override
	public User save(User user) {
		// TODO Auto-generated method stub
		SimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(jdbcTemplate).withTableName("User");
		Map<String, Object> args = new HashMap<String, Object>();
		args.put("username", user.getUsername());
		args.put("password", user.getPassword());
		if(jdbcInsert.execute(args)>0)
			return user;
		else
			return null;
	}

	@Override
	public User findByUsername(String username) {
		// TODO Auto-generated method stub
		return jdbcTemplate.queryForObject("select username, password from User where username=?", new UserRowMapper(), username);
	}

	@Override
	public List<User> findAll() {
		// TODO Auto-generated method stub
		return jdbcTemplate.query("select username, password from User", new UserRowMapper());
	}

	private static final class UserRowMapper implements RowMapper<User> {

		@Override
		public User mapRow(ResultSet rs, int rowNum) throws SQLException {
			// TODO Auto-generated method stub
			String username = rs.getString("username");
			String password = rs.getString("password");
			return new User(username, password);
		}		
	}
}

3. 然后在需要访问数据库的地方注入Repository然后调用相应的方法来访问数据库
@Autowired
private UserRepository userRepository;