SpringMVC流程
5.1.1 Following the life of a request
Every time a user clicks a link or submits a form in their web browser, a request goes to
work. A request’s job description is that of a courier. Just like a postal carrier or a
FedEx delivery person, a request lives to carry information from one place to another.
The request is a busy creature. From the time it leaves the browser until it returns
with a response, it makes several stops, each time dropping off a bit of information
and picking up some more. Figure 5.1 shows all the stops the request makes as it travels
through Spring MVC.
When the request leaves the browser B, it carries information about what the user
is asking for. At the least, the request will be carrying the requested URL. But it may
also carry additional data, such as the information submitted in a form by the user.

The first stop in the request’s travels is at Spring’s DispatcherServlet. Like most Javabased
web frameworks, Spring MVC funnels requests through a single front controller
servlet. A front controller is a common web application pattern where a single servlet
delegates responsibility for a request to other components of an application to perform
actual processing. In the case of Spring MVC, DispatcherServlet is the front
controller.
The DispatcherServlet’s job is to send the request on to a Spring MVC controller.
A controller is a Spring component that processes the request. But a typical application
may have several controllers, and DispatcherServlet needs some help deciding
which controller to send the request to. So the DispatcherServlet consults one or
more handler mappings C to figure out where the request’s next stop will be. The
handler mapping pays particular attention to the URL carried by the request when
making its decision.
Once an appropriate controller has been chosen, DispatcherServlet sends the
request on its merry way to the chosen controller D. At the controller, the request
drops off its payload (the information submitted by the user) and patiently waits while
the controller processes that information. (Actually, a well-designed controller performs
little or no processing itself and instead delegates responsibility for the business
logic to one or more service objects.)
The logic performed by a controller often results in some information that needs
to be carried back to the user and displayed in the browser. This information is
referred to as the model. But sending raw information back to the user isn’t sufficient—
it needs to be formatted in a user-friendly format, typically HTML. For that, the
information needs to be given to a view, typically a JavaServer Page (JSP).
One of the last things a controller does is package up the model data and identify
the name of a view that should render the output. It then sends the request, along
with the model and view name, back to the DispatcherServlet E.
So that the controller doesn’t get coupled to a particular view, the view name
passed back to DispatcherServlet doesn’t directly identify a specific JSP. It doesn’t
even necessarily suggest that the view is a JSP. Instead, it only carries a logical name
that will be used to look up the actual view that will produce the result. The
DispatcherServlet consults a view resolver F to map the logical view name to a specific
view implementation, which may or may not be a JSP.
Now that DispatcherServlet knows which view will render the result, the
request’s job is almost over. Its final stop is at the view implementation G, typically a
JSP, where it delivers the model data. The request’s job is finally done. The view will
use the model data to render output that will be carried back to the client by the (notso-
hardworking) response object H.
As you can see, a request goes through several steps along its way to producing a
response for the client. Most of these steps take place within the Spring MVC framework,
in the components shown in figure 5.1. Although the bulk of this chapter will
focus on writing controllers, let’s take a moment to set up the essential components of
Spring MVC.


一.传统SpringMVC (定义XML）

1. 创建Maven的webapp项目
2. 修改pom.xml添加依赖
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    
    <!--日志-->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.7.21</version>
    </dependency>
    <!--J2EE-->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.1.0</version>
    </dependency>
    <dependency>
      <groupId>javax.servlet.jsp</groupId>
      <artifactId>jsp-api</artifactId>
      <version>2.2</version>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>
    <!--mysql驱动包-->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.35</version>
    </dependency>
    <!--springframework-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>4.2.6.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>4.2.6.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>4.2.6.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <version>4.2.6.RELEASE</version>
    </dependency>
      <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-jdbc</artifactId>
          <version>4.2.6.RELEASE</version>
      </dependency>
    <dependency>
      <groupId>com.github.stefanbirkner</groupId>
      <artifactId>system-rules</artifactId>
      <version>1.16.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjweaver</artifactId>
      <version>1.8.9</version>
    </dependency>
    <!--其他需要的包-->
    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-lang3</artifactId>
        <version>3.4</version>
    </dependency>
  </dependencies>

3. 修改web.xml
<web-app id="WebApp_ID" version="2.4"
    xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">  

  <display-name>Archetype Created Web Application</display-name>                              
                                                                                              
      <!-- ?applicationContext.xml???? -->                                                    
    <context-param>                                                                           
        <param-name>contextConfigLocation</param-name>                                        
        <param-value>/WEB-INF/applicationContext.xml</param-value>                            
    </context-param>                                                                          
    <listener>                                                                                
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>                                                                               
                                                                                              
    <!--??springmvc DispatcherServlet-->                                                      
    <servlet>                                                                                 
        <servlet-name>springMVC</servlet-name>                                                
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>      
        <init-param>                                                                          
            <!--??dispatcher.xml??mvc?????-->                                                 
            <param-name>contextConfigLocation</param-name>                                    
            <param-value>/WEB-INF/dispatcher-servlet.xml</param-value>                        
        </init-param>                                                                         
        <load-on-startup>1</load-on-startup>                                                  
    </servlet>                                                                                
    <servlet-mapping>                                                                         
        <servlet-name>springMVC</servlet-name>                                                
        <url-pattern>/</url-pattern>                                                          
    </servlet-mapping>                        
</web-app>


4. 创建dispatcher-servlet.xml
<?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:context="http://www.springframework.org/schema/context"
           xmlns:mvc="http://www.springframework.org/schema/mvc"
           xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
 
    <!--启用spring的一些annotation -->
    <context:annotation-config/> 
 
    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
    <mvc:annotation-driven/>
    
    <!-- HandlerMapping -->  
	<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>  
   
	<!-- HandlerAdapter -->  
	<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/> 

    <context:component-scan base-package="example.controller"/>
     
     <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
    	<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>  
    	<property name="prefix" value="/WEB-INF/views/"/>  
    	<property name="suffix" value=".jsp"/>  
	</bean>

	<bean name="/hello" class="example.controller.HelloController"/> 
</beans>

5. 创建applicationContext.xml (这里是个空的，里面可以添加bean)
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    
    xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.2.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
      ">
 

</beans>

6 创建目录 src/main/java/webapp/WEB-INF/views
这个里面都放者页面， 因为这里dispatcher-servlet.xml里面指定的viewResolver是JSP，所以里面都存放JSP

7 创建controller 

(这个是在web.xml里面指定了调用map,  /hello => example.controller.HelloController)

package example.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

public class HelloController implements Controller{

	@Override
	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ModelAndView mv = new ModelAndView();  
		mv.addObject("message", "Hello World!");  
		mv.setViewName("hello");  
		return mv;
	}

}


(这个是通过注解来指定调用map)

package example.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class IndexController {

    @RequestMapping("/index")
    public String index(Model model) {
    	model.addAttribute("message", "Hello World");
        return "index";
    }
    
    @RequestMapping(path="/test",method=RequestMethod.GET)
    public String testPara(
    @RequestParam("parm1") int parm1,
    @RequestParam("parm2") String parm2, Model model) {
    	model.addAttribute("parm1",parm1);
    	model.addAttribute("parm2",parm2);
    	return "test";
    }
}

8 启动项目就可以访问页面了

二 Springmvc 注解
0. pom.xml中添加依赖
        <!--日志-->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.7.21</version>
    </dependency>
    <!--J2EE-->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.1.0</version>
    </dependency>
    <dependency>
      <groupId>javax.servlet.jsp</groupId>
      <artifactId>jsp-api</artifactId>
      <version>2.2</version>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>
    <!--mysql驱动包-->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.35</version>
    </dependency>
    <!--springframework-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>4.2.6.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>4.2.6.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>4.2.6.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <version>4.2.6.RELEASE</version>
    </dependency>
      <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-jdbc</artifactId>
          <version>4.2.6.RELEASE</version>
      </dependency>
    <dependency>
      <groupId>com.github.stefanbirkner</groupId>
      <artifactId>system-rules</artifactId>
      <version>1.16.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjweaver</artifactId>
      <version>1.8.9</version>
    </dependency>
    <!--其他需要的包-->
    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-lang3</artifactId>
        <version>3.4</version>
    </dependency>
    
    <!-- validation -->
    <dependency>
    <groupId>javax.validation</groupId>
    <artifactId>validation-api</artifactId>
    <version>1.0.0.GA</version>
	</dependency>
	
  </dependencies>

1. 定义WebAppInitializer
any class that extends AbstractAnnotationConfigDispatcherServletInitializer will automatically
be used to configure DispatcherServlet and the Spring application context
in the application’s servlet context.
任何继承AbstractAnnotationConfigDispatcherServletInitializer的类都会自动用来配置DispatcherServlet 

package example;

import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;

public class Springmvc3WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer{   ==>相当于web.xml里面的定义

	//identifies one or more paths that DispatcherServlet will be mapped to             ===>相当于web.xml里面定义的dispatcherServlet
	@Override
	protected String[] getServletMappings() {
		// TODO Auto-generated method stub
		return new String[] { "/" };
	}
	
	//load the other beans such as controllers, view resolvers, and handler mappings in your application     ===>相当于web.xml里面指定dispatcher-servlet.xml
	@Override
	protected Class<?>[] getServletConfigClasses() {
		// TODO Auto-generated method stub
		return new Class<?>[] { WebConfig.class };
	}
	
	//application context with beans defined in the WebConfig configuration.class (using Java configuration)   ===>相当于web.xml里面指定applicationContext.xml
	@Override
	protected Class<?>[] getRootConfigClasses() {
		// TODO Auto-generated method stub
		return new Class<?>[] { RootConfig.class };
	}
}

2. 定义WebConfig.class
package example;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

@Configuration
@EnableWebMvc
@ComponentScan("example.web")   //all controller will be put in package example.web
public class WebConfig extends WebMvcConfigurerAdapter{

	@Bean
	public ViewResolver viewResolver() {
		InternalResourceViewResolver resolver =new InternalResourceViewResolver();
		resolver.setPrefix("/WEB-INF/views/");
		resolver.setSuffix(".jsp");
		resolver.setExposeContextBeansAsAttributes(true);
		return resolver;
	}
	
	@Override
	public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
		configurer.enable();
	}
}


3. 定义RootConfig.class
package example;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.ComponentScan.Filter;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.FilterType;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

@Configuration
@ComponentScan(basePackages={"example"},
			   //do not scan the class annotated with @EnableWebMvc
			   excludeFilters={@Filter(type=FilterType.ANNOTATION, value=EnableWebMvc.class)})
public class RootConfig {

}

4. 定义controller

package example.web;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import static org.springframework.web.bind.annotation.RequestMethod.*;

@Controller
public class HomeController {
	
	@RequestMapping(value="/", method=GET)
	public String home() {
		return "home";
	}
}


package example.web;

import static org.springframework.web.bind.annotation.RequestMethod.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import example.Spitter;

@Controller
@RequestMapping("/spitter")
public class SpitterController {

	@RequestMapping(value="/register", method=GET)
	public String showRegistrationForm() {
		return "registerForm";
	}
	
	@RequestMapping(value="/register", method=POST)
	public String processRegistration(Spitter spitter, Model model) {
	
		model.addAttribute(spitter);
		return "redirect:/spitter/" + spitter.getUsername();
	}
	
	@RequestMapping(value="/{username}", method=GET)
	public String showSpitterProfile(
	@PathVariable String username, Model model) {
		model.addAttribute("received", username);
		return "profile";
	}
}


5. 在src\main\webapp\WEB-INF\views里面创建JSP

这种方式就避免的第一种方式那样需要写各种xml, 第二种方式更易读

三。用自定义的servlet
基本上和《二》中的步骤一样，唯一的区别在于第2小点，之前是创建的AbstractAnnotationConfigDispatcherServletInitializer，现在可以自定义,然后在里面可以可添加filter和linsener
package example;

package example;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRegistration;
import javax.servlet.FilterRegistration.Dynamic;

import java.util.EnumSet;

import javax.servlet.DispatcherType;
import javax.servlet.MultipartConfigElement;

import org.springframework.web.WebApplicationInitializer;
import org.springframework.web.context.ContextLoaderListener;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.servlet.DispatcherServlet;

public class MyServletInitializer implements WebApplicationInitializer{

	@Override
	public void onStartup(ServletContext servletContext) throws ServletException {
	// TODO Auto-generated method stub
	//Add listener
	WebApplicationContext context = getContext();
        servletContext.addListener(new ContextLoaderListener(context));
        servletContext.addListener(new MySessionListeren());
        servletContext.addListener(new MyRequestListener());
        
        //Add Filter
        Dynamic filter2 = servletContext.addFilter("MyFilter2",MyFilter2.class);
        Dynamic filter1 = servletContext.addFilter("MyFilter1",MyFilter1.class);
        EnumSet<DispatcherType> dispatcherTypeSet = EnumSet.noneOf(DispatcherType.class);
        dispatcherTypeSet.add(DispatcherType.REQUEST);
        
        filter2.addMappingForUrlPatterns(dispatcherTypeSet, false, "/");
        filter1.addMappingForUrlPatterns(dispatcherTypeSet, false, "/");
        
        //set DispatcherServlet
        //Dynamic myServlet = servletContext.addServlet("myServlet", MyServlet.class);
        ServletRegistration.Dynamic dispatcher = servletContext.addServlet("DispatcherServlet", new DispatcherServlet(context));
        dispatcher.setLoadOnStartup(1);
		
        //dispatcher.addMapping("/custom");
        dispatcher.addMapping("/");
        
        //other settting
        //set muti-file upload
        dispatcher.setMultipartConfig(
        		new MultipartConfigElement("/"));
	}

    private AnnotationConfigWebApplicationContext getContext() {
        AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();
        context.setConfigLocation("example");
        return context;
    }
}



四.Springboot + SpringMVC

1. 创建sping starter project
2. 修改pom.xml添加依赖
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
	</dependencies>

3. 创建WebConfig.class
这个里面可以指定一些不需要经过controller处理的路径

package cadt;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {
	@Override 
	public void addViewControllers(ViewControllerRegistry registry) {
		registry.addViewController("/").setViewName("home");
	}
}

4 创建controller  (指定调用路径 /hello)

package cadt;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class HelloController {

    @RequestMapping("/hello")
    public String index(Model model) {
    	model.addAttribute("message", "Hello World");   //添加返回值
        return "hello";
    }
}


5 如果需要添加filter
package tk.mybatis;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;

import tk.mybatis.springboot.filter.TestFilter1;
import tk.mybatis.springboot.filter.TestFilter2;

@SpringBootApplication
public class MybatisSpringBootApplication {

	public static void main(String[] args) {
		SpringApplication.run(MybatisSpringBootApplication.class, args);
	}

	@Bean
	public FilterRegistrationBean testFilterRegistration() {
		FilterRegistrationBean registration = new FilterRegistrationBean(new TestFilter1());
		registration.addUrlPatterns("/"); //
		registration.addInitParameter("paramName", "paramValue"); //
		registration.setName("testFilter");
		registration.setOrder(1);
		return registration;
	}
 
	@Bean
	public FilterRegistrationBean authFilterRegistration() {
		FilterRegistrationBean registration = new FilterRegistrationBean(new TestFilter2());
		registration.addUrlPatterns("/*"); //
		registration.addInitParameter("paramName", "paramValue"); //
		registration.setName("authFilter");
		registration.setOrder(2);
		return registration;
	}

}


我们可以看到加上了springboot后，不用再去创建web.xml, dispatcher-servlet.xml, applicationContext.xml，也不用创建初始化dispatcherServlet的类了。
所以四种方式，一种比一种简单，但是背后的原理都是一样的。