1. Advice
In AOP terms, the job of an aspect is called advice. Advice defines both the what and the when of an aspect.

 Before—The advice functionality takes place before the advised method is
invoked.

 After—The advice functionality takes place after the advised method completes,
regardless of the outcome.

 After-returning—The advice functionality takes place after the advised method
successfully completes.

 After-throwing—The advice functionality takes place after the advised method
throws an exception.

 Around—The advice wraps the advised method, providing some functionality
before and after the advised method is invoked.

2. JOIN POINTS
This point could
be a method being called, an exception being thrown, or even a field being modified.

3. POINTCUTS
If advice defines the what and when of aspects, then pointcuts define the where. A
pointcut definition matches one or more join points at which advice should be woven.
我的理解是从所有JOIN POINTS的里面挑选一到二个来执行advice的操作。 
JOIN POINTS是泛指所有可以切入的点，包括方法，异常或域。但是POINTCUTS是具体到哪一个或几个JOIN POINTS去应用advice.

4. ASPECTS
An aspect is the merger of advice and pointcuts. - —what it does and where and when it does it.

5. INTRODUCTIONS
An introduction allows you to add new methods or attributes to existing classes.

6. WEAVING
Weaving is the process of applying aspects to a target object to create a new proxied
object.

 Compile time—Aspects are woven in when the target class is compiled. This
requires a special compiler. AspectJ’s weaving compiler weaves aspects this way.

 Class load time—Aspects are woven in when the target class is loaded into the
JVM. This requires a special ClassLoader that enhances the target class’s bytecode
before the class is introduced into the application. AspectJ 5’s load-time
weaving (LTW) support weaves aspects this way.

 Runtime—Aspects are woven in sometime during the execution of the application.
Typically, an AOP container dynamically generates a proxy object that delegates
to the target object while weaving in the aspects. This is how Spring AOP
aspects are woven.

7 Spring’s support for AOP comes in four styles:
 Classic Spring proxy-based AOP
 Pure-POJO aspects
 @AspectJ annotation-driven aspects
 Injected AspectJ aspects (available in all versions of Spring)

关注点: 增加的某个业务。如日志，安全，缓存，事务等.
aspect切面:一个关注点的模块化，比如将日志，安全，缓存，事务等这些方法分别放到不同的类中，这些不同的类就是切面.
joinpoint连接点: 就是核心逻辑流中某个需要加如关注点的地方.(也就是核心逻辑流成中的某个方法)
通知advice: 用来指定什么时候执行什么动作.
weaving织入:将切面应用到目标对象的过程.